<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UmbracoExamine</name>
    </assembly>
    <members>
        <member name="M:UmbracoExamine.Config.IndexFieldCollection.Add(UmbracoExamine.Config.IndexField)">
            <summary>
            Adds an index field to the collection
            </summary>
            <param name="field"></param>
        </member>
        <member name="P:UmbracoExamine.Config.IndexFieldCollection.Item(System.String)">
            <summary>
            Default property for accessing an IndexField definition
            </summary>
            <value>Field Name</value>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.#ctor(UmbracoExamine.SearchCriteria.LuceneSearchCriteria,Lucene.Net.Search.BooleanClause.Occur)">
            <summary>
            Initializes a new instance of the <see cref="T:UmbracoExamine.SearchCriteria.LuceneQuery"/> class.
            </summary>
            <param name="search">The search.</param>
            <param name="occurance">The occurance.</param>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Id(System.Int32)">
            <summary>
            Query on the id
            </summary>
            <param name="id">The id.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.NodeName(System.String)">
            <summary>
            Query on the NodeName
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.NodeTypeAlias(System.String)">
            <summary>
            Query on the NodeTypeAlias
            </summary>
            <param name="nodeTypeAlias">The node type alias.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.ParentId(System.Int32)">
            <summary>
            Query on the Parent ID
            </summary>
            <param name="id">The id of the parent.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Field(System.String,System.String)">
            <summary>
            Query on the specified field
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="fieldValue">The field value.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Range(System.String,System.DateTime,System.DateTime)">
            <summary>
            Ranges the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Range(System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Ranges the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="includeLower">if set to <c>true</c> [include lower].</param>
            <param name="includeUpper">if set to <c>true</c> [include upper].</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Range(System.String,System.Int32,System.Int32)">
            <summary>
            Ranges the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Range(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Ranges the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="includeLower">if set to <c>true</c> [include lower].</param>
            <param name="includeUpper">if set to <c>true</c> [include upper].</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Range(System.String,System.String,System.String)">
            <summary>
            Ranges the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Range(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Ranges the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="includeLower">if set to <c>true</c> [include lower].</param>
            <param name="includeUpper">if set to <c>true</c> [include upper].</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.NodeName(Examine.SearchCriteria.IExamineValue)">
            <summary>
            Query on the NodeName
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.NodeTypeAlias(Examine.SearchCriteria.IExamineValue)">
            <summary>
            Query on the NodeTypeAlias
            </summary>
            <param name="nodeTypeAlias">The node type alias.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.Field(System.String,Examine.SearchCriteria.IExamineValue)">
            <summary>
            Query on the specified field
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="fieldValue">The field value.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedAnd(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Queries multiple fields with each being an And boolean operation
            </summary>
            <param name="fields">The fields.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedAnd(System.Collections.Generic.IEnumerable{System.String},Examine.SearchCriteria.IExamineValue[])">
            <summary>
            Queries multiple fields with each being an And boolean operation
            </summary>
            <param name="fields">The fields.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedOr(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Queries multiple fields with each being an Or boolean operation
            </summary>
            <param name="fields">The fields.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedOr(System.Collections.Generic.IEnumerable{System.String},Examine.SearchCriteria.IExamineValue[])">
            <summary>
            Queries multiple fields with each being an Or boolean operation
            </summary>
            <param name="fields">The fields.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedNot(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Queries multiple fields with each being an Not boolean operation
            </summary>
            <param name="fields">The fields.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedNot(System.Collections.Generic.IEnumerable{System.String},Examine.SearchCriteria.IExamineValue[])">
            <summary>
            Queries multiple fields with each being an Not boolean operation
            </summary>
            <param name="fields">The fields.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedFlexible(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Examine.SearchCriteria.BooleanOperation},System.String[])">
            <summary>
            Queries on multiple fields with their inclusions customly defined
            </summary>
            <param name="fields">The fields.</param>
            <param name="operations">The operations.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.GroupedFlexible(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Examine.SearchCriteria.BooleanOperation},Examine.SearchCriteria.IExamineValue[])">
            <summary>
            Queries on multiple fields with their inclusions customly defined
            </summary>
            <param name="fields">The fields.</param>
            <param name="operations">The operations.</param>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.OrderBy(System.String[])">
            <summary>
            Orders the results by the specified fields
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneQuery.OrderByDescending(System.String[])">
            <summary>
            Orders the results by the specified fields in a descending order
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="P:UmbracoExamine.SearchCriteria.LuceneQuery.BooleanOperation">
            <summary>
            Gets the boolean operation which this query method will be added as
            </summary>
            <value>The boolean operation.</value>
        </member>
        <member name="T:UmbracoExamine.LuceneExamineSearcher">
            <summary>
            An Examine searcher which uses Lucene.Net as the 
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexPath"></param>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineSearcher.m_Searcher">
            <summary>
            Used as a singleton instance
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineSearcher.m_IndexFolder">
            <summary>
            Do not access this object directly. The public property ensures that the folder state is always up to date
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.Search(System.String,System.Boolean)">
            <summary>
            Simple search method which defaults to searching content nodes
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.Search(Examine.SearchCriteria.ISearchCriteria)">
            <summary>
            Searches the data source using the Examine Fluent API
            </summary>
            <param name="searchParams">The fluent API search.</param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.CreateSearchCriteria">
            <summary>
            Creates search criteria that defaults to IndexType.Any and BooleanOperation.And
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.CreateSearchCriteria(System.String)">
            <summary>
            Creates an instance of SearchCriteria for the provider
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.CreateSearchCriteria(System.String,Examine.SearchCriteria.BooleanOperation)">
            <summary>
            Creates an instance of SearchCriteria for the provider
            </summary>
            <param name="type">The type of data in the index.</param>
            <param name="defaultOperation">The default operation.</param>
            <returns>A blank SearchCriteria</returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.GetSearcher">
            <summary>
            Gets the searcher for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.GetReaderStatus">
            <summary>
            Checks if the reader is current, closed or not up to date
            </summary>
            <returns>The reader status</returns>
            <remarks>
            Performs error checking as the reader may be closed
            </remarks>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineSearcher.ValidateSearcher(System.Boolean)">
            <summary>
            This checks if the singleton IndexSearcher is initialized and up to date.
            </summary>
            <param name="forceReopen"></param>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineSearcher.EnableLeadingWildcards">
            <summary>
            Used to specify if leading wildcards are allowed. WARNING SLOWS PERFORMANCE WHEN ENABLED!
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineSearcher.LuceneIndexFolder">
            <summary>
            Directory where the Lucene.NET Index resides
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineSearcher.IndexingAnalyzer">
            <summary>
            The analyzer to use when searching content, by default, this is set to StandardAnalyzer
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineSearcher.IndexSetName">
            <summary>
            Name of the Lucene.NET index set
            </summary>
        </member>
        <member name="T:UmbracoExamine.SearchCriteria.LuceneBooleanOperation">
            <summary>
            An implementation of the fluent API boolean operations
            </summary>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneBooleanOperation.And">
            <summary>
            Sets the next operation to be AND
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneBooleanOperation.Or">
            <summary>
            Sets the next operation to be OR
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneBooleanOperation.Not">
            <summary>
            Sets the next operation to be NOT
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneBooleanOperation.Compile">
            <summary>
            Compiles this instance for fluent API conclusion
            </summary>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.LinqXmlExtensions">
            <summary>
            Static methods to help query umbraco xml
            </summary>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.ToXDocument(umbraco.cms.businesslogic.Content,System.Boolean)">
            <summary>
            Converts a content node to XDocument
            </summary>
            <param name="node"></param>
            <param name="cacheOnly">true if data is going to be returned from cache</param>
            <returns></returns>
            <remarks>
            If the type of node is not a Document, the cacheOnly has no effect, it will use the API to return
            the xml. 
            </remarks>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            Converts an <see cref="T:System.Xml.XmlNode"/> to a <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="node">Node to convert</param>
            <returns>Converted node</returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.ToXDocument(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Creates an <see cref="T:System.Xml.Linq.XDocument"/> from the collection of <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="elements">Elements to create document from</param>
            <returns>Document containing elements</returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.ToXDocument(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Converts an umbraco library call to an XDocument
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.UmbIsProperty(System.Xml.Linq.XElement,System.String)">
            <summary>
            Checks if the XElement is an umbraco property based on an alias.
            This works for both types of schemas
            </summary>
            <param name="x"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.UmbIsElement(System.Xml.Linq.XElement)">
            <summary>
            Returns true if the XElement is recognized as an umbraco xml NODE (doc type) 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.UmbNodeTypeAlias(System.Xml.Linq.XElement)">
            <summary>
            This takes into account both schemas and returns the node type alias.
            If this isn't recognized as an element node, this returns an empty string
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.UmbSelectPropertyValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the property value for the doc type element (such as id, path, etc...)
            If the element is not an umbraco doc type node, or the property name isn't found, it returns String.Empty 
            </summary>
            <param name="x"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LinqXmlExtensions.UmbSelectDataValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns umbraco value for a data element with the specified alias.
            </summary>
            <param name="xml"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.Config.IndexSetExtensions">
            <summary>
            Extension methods for IndexSet
            </summary>
        </member>
        <member name="M:UmbracoExamine.Config.IndexSetExtensions.ToIndexCriteria(UmbracoExamine.Config.IndexSet,UmbracoExamine.DataServices.IDataService)">
            <summary>
            Convert the indexset to indexerdata.
            This detects if there are no user/system fields specified and if not, uses the data service to look them 
            up and update the in memory IndexSet.
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.Config.IndexSetExtensions.CombinedUmbracoFields(UmbracoExamine.Config.IndexSet,UmbracoExamine.DataServices.IDataService)">
            <summary>
            Returns a string array of all fields that are indexed including Umbraco fields
            </summary>
        </member>
        <member name="M:UmbracoExamine.DataServices.IContentService.GetAllUserPropertyNames">
            <summary>
            Returns a list of ALL properties names for all nodes defined in the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.IContentService.GetAllSystemPropertyNames">
            <summary>
            Returns a list of ALL system property names for all nodes defined in the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.StripHtml(System.String)">
            <summary>
            removes html markup from a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetPublishedContentByXPath(System.String)">
            <summary>
            Gets published content by xpath
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetLatestContentByXPath(System.String)">
            <summary>
            This is quite an intensive operation...
            get all root content, then get the XML structure for all children,
            then run xpath against the navigator that's created
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetPage(System.Int32)">
            <summary>
            Unfortunately, we need to implement our own IsProtected method since 
            the Umbraco core code requires an HttpContext for this method and when we're running
            async, there is no context
            </summary>
            <param name="documentId"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.IsProtected(System.Int32,System.String)">
            <summary>
            Unfortunately, we need to implement our own IsProtected method since 
            the Umbraco core code requires an HttpContext for this method and when we're running
            async, there is no context
            </summary>
            <param name="nodeId"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetAllUserPropertyNames">
            <summary>
            Returns a list of all of the user defined property names in Umbraco
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetAllSystemPropertyNames">
            <summary>
            Returns a list of all system field names in Umbraco
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.SingleCharacterWildcard(System.String)">
            <summary>
            Adds a single character wildcard to the string for Lucene wildcard matching
            </summary>
            <param name="s">The string to wildcard.</param>
            <returns>An IExamineValue for the required operation</returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.MultipleCharacterWildcard(System.String)">
            <summary>
            Adds a multi-character wildcard to a string for Lucene wildcard matching
            </summary>
            <param name="s">The string to wildcard.</param>
            <returns>An IExamineValue for the required operation</returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.Fuzzy(System.String)">
            <summary>
            Configures the string for fuzzy matching in Lucene using the default fuzziness level
            </summary>
            <param name="s">The string to configure fuzzy matching on.</param>
            <returns>An IExamineValue for the required operation</returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.Fuzzy(System.String,System.Single)">
            <summary>
            Configures the string for fuzzy matching in Lucene using the supplied fuzziness level
            </summary>
            <param name="s">The string to configure fuzzy matching on.</param>
            <param name="fuzzieness">The fuzzieness level.</param>
            <returns>
            An IExamineValue for the required operation
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.Boost(System.String,System.Single)">
            <summary>
            Configures the string for boosting in Lucene
            </summary>
            <param name="s">The string to wildcard.</param>
            <param name="boost">The boost level.</param>
            <returns>
            An IExamineValue for the required operation
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.Proximity(System.String,System.Int32)">
            <summary>
            Configures the string for proximity matching
            </summary>
            <param name="s">The string to wildcard.</param>
            <param name="proximity">The proximity level.</param>
            <returns>
            An IExamineValue for the required operation
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.Escape(System.String)">
            <summary>
            Escapes the string within Lucene
            </summary>
            <param name="s">The string to wildcard.</param>
            <returns>An IExamineValue for the required operation</returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is null or empty</exception>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.Then(Examine.SearchCriteria.IExamineValue,System.String)">
            <summary>
            Sets up an <see cref="T:Examine.SearchCriteria.IExamineValue"/> for an additional Examiness
            </summary>
            <param name="examineValue">The IExamineValue to continue working with.</param>
            <param name="s">The string to postfix.</param>
            <returns>Combined strings</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.ToLuceneOccurance(Examine.SearchCriteria.BooleanOperation)">
            <summary>
            Converts an Examine boolean operation to a Lucene representation
            </summary>
            <param name="o">The operation.</param>
            <returns>The translated Boolean operation</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchExtensions.ToBooleanOperation(Lucene.Net.Search.BooleanClause.Occur)">
            <summary>
            Converts a Lucene boolean occurrence to an Examine representation
            </summary>
            <param name="o">The occurrence to translate.</param>
            <returns>The translated boolean occurrence</returns>
        </member>
        <member name="T:UmbracoExamine.LuceneExamineIndexer">
            <summary>
            This is a Lucene.Net Examine indexer for Umbraco
            </summary>
            <remarks>
            <para>
            Some links picked up along the way:
            </para>
            <para>
            A matrix of concurrent lucene operations: 
            http://www.jguru.com/faq/view.jsp?EID=913302.
            </para>
            <para>
            Based on the info here, it is best to only call optimize when there is no activity,
            we only optimized after the queue has been processed and at start up:
            http://www.gossamer-threads.com/lists/lucene/java-dev/47895
            http://lucene.apache.org/java/2_2_0/api/org/apache/lucene/index/IndexWriter.html
            </para>
            </remarks>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.SortedFieldNamePrefix">
            <summary>
            The prefix added to a field when it is included in the index for sorting
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.OptimizationCommitThreshold">
            <summary>
            Specifies how many index commits are performed before running an optimization
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.IndexTypeFieldName">
            <summary>
            Used to store a non-tokenized key for the document
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.IndexNodeIdFieldName">
            <summary>
            Used to store a non-tokenized type for the document
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.IndexPathFieldName">
            <summary>
            Used to store the path of a content object
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="indexPath"></param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set up all properties for the indexer based on configuration information specified. This will ensure that
            all of the folders required by the indexer are created and exist. This will also create an instruction
            file declaring the computer name that is part taking in the indexing. This file will then be used to
            determine the master indexer machine in a load balanced environment (if one exists).
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.m_IndexerLocker">
            <summary>
            Used to perform thread locking
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.m_FolderLocker">
            <summary>
            used to thread lock calls for creating and verifying folders
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.m_IsIndexing">
            <summary>
            Used for double check locking during an index operation
            </summary>
        </member>
        <member name="F:UmbracoExamine.LuceneExamineIndexer.m_InternalSearcher">
            <summary>
            We need an internal searcher used to search against our own index.
            This is used for finding all descendant nodes of a current node when deleting indexes.
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.ReIndexNode(System.Xml.Linq.XElement,System.String)">
            <summary>
            Forces a particular XML node to be reindexed
            </summary>
            <param name="node">XML node to reindex</param>
            <param name="type">Type of index to use</param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.RebuildIndex">
            <summary>
            Rebuilds the entire index from scratch for all index types
            </summary>
            <remarks>This will completely delete the index and recreate it</remarks>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.DeleteFromIndex(System.String)">
            <summary>
            Deletes a node from the index.                
            </summary>
            <remarks>
            When a content node is deleted, we also need to delete it's children from the index so we need to perform a 
            custom Lucene search to find all decendents and create Delete item queues for them too.
            </remarks>
            <param name="nodeId">ID of the node to delete</param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.IndexAll(System.String)">
            <summary>
            Re-indexes all data for the index type specified
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.AddSingleNodeToIndex(System.Xml.Linq.XElement,System.String)">
            <summary>
            Adds single node to index. If the node already exists, a duplicate will probably be created,
            To re-index, use the ReIndexNode method.
            </summary>
            <param name="node">The node to index.</param>
            <param name="type">The type to store the node as.</param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.OptimizeIndex">
            <summary>
            This wil optimize the index for searching, this gets executed when this class instance is instantiated.
            </summary>
            <remarks>
            This can be an expensive operation and should only be called when there is no indexing activity
            </remarks>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.DeleteFromIndex(Lucene.Net.Index.Term,Lucene.Net.Index.IndexReader)">
            <summary>
            Removes the specified term from the index
            </summary>
            <param name="indexTerm"></param>
            <returns>Boolean if it successfully deleted the term, or there were on errors</returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.ValidateDocument(System.Xml.Linq.XElement)">
            <summary>
            Ensures that the node being indexed is of a correct type and is a descendent of the parent id specified.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.GetDataToIndex(System.Xml.Linq.XElement,System.String)">
            <summary>
            Collects all of the data that needs to be indexed as defined in the index set.
            </summary>
            <param name="node"></param>
            <returns>A dictionary representing the data which will be indexed</returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.AddDocument(System.Collections.Generic.Dictionary{System.String,System.String},Lucene.Net.Index.IndexWriter,System.Int32,System.String,System.String)">
            <summary>
            Collects the data for the fields and adds the document which is then committed into Lucene.Net's index
            </summary>
            <param name="fields">The fields and their associated data.</param>
            <param name="writer">The writer that will be used to update the Lucene index.</param>
            <param name="nodeId">The node id.</param>
            <param name="type">The type to index the node as.</param>
            <param name="path">The path of the content node</param>
            <remarks>
            This will normalize (lowercase) all text before it goes in to the index.
            </remarks>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.SafelyProcessQueueItems">
            <summary>
            Process all of the queue items. This checks if this machine is the Executive and if it's in a load balanced
            environments. If then acts accordingly: 
                Not the executive = doesn't index, i
                In async mode = use file watcher timer
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.ForceProcessQueueItems">
            <summary>
            Loop through all files in the queue item folder and index them.
            Regardless of weather this machine is the executive indexer or not or is in a load balanced environment
            or not, this WILL attempt to process the queue items into the index.
            </summary>
            <returns>
            The number of queue items processed
            </returns>
            <remarks>
            Inheritors should be very carefully using this method, SafelyProcessQueueItems will ensure
            that the correct machine processes the items into the index. SafelyQueueItems calls this method
            if it confirms that this machine is the one to process the queue.
            </remarks>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.GetXDocument(System.String,System.String)">
            <summary>
            Returns an XDocument for the entire tree stored for the IndexType specified.
            </summary>
            <param name="xPath">The xpath to the node.</param>
            <param name="type">The type of data to request from the data service.</param>
            <returns>Either the Content or Media xml. If the type is not of those specified null is returned</returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.SaveDeleteIndexQueueItem(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Saves a file indicating that the executive indexer should remove the from the index those that match
            the term saved in this file.
            This will save a file prefixed with the current machine name with an extension of .del
            </summary>
            <param name="term"></param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.SaveAddIndexQueueItem(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.String,System.String)">
            <summary>
            Writes the information for the fields to a file names with the computer's name that is running the index and
            a GUID value. The indexer will then index the values stored in the files in another thread so that processing may continue.
            This will save a file prefixed with the current machine name with an extension of .add
            </summary>
            <param name="fields">The fields.</param>
            <param name="nodeId">The node id.</param>
            <param name="type">The type.</param>
            <param name="path">The path of the content node</param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.ReInitialize">
            <summary>
            This makes sure that the folders exist, that the executive indexer is setup and that the index is optimized.
            This is called at app startup when the providers are initialized but called again if folder are missing during a
            an indexing operation.
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.m_FileWatcher_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles the file watcher timer poll elapsed event
            This will:
            - Disable the FileSystemWatcher        
            - Recursively process all queue items in the folder and check after processing if any more files have been added
            - Once there's no more files to be processed, re-enables the watcher
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.GetExclusiveIndexWriter(Lucene.Net.Index.IndexWriter@,Lucene.Net.Index.IndexReader@)">
            <summary>
            Checks the writer passed in to see if it is active, if not, checks if the index is locked. If it is locked, 
            returns checks if the reader is not null and tries to close it. if it's still locked returns null, otherwise
            creates a new writer.
            </summary>
            <param name="writer"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.GetExclusiveIndexReader(Lucene.Net.Index.IndexReader@,Lucene.Net.Index.IndexWriter@)">
            <summary>
            Checks the reader passed in to see if it is active, if not, checks if the index is locked. If it is locked, 
            returns checks if the writer is not null and tries to close it. if it's still locked returns null, otherwise
            creates a new reader.
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.ProcessDeleteQueueItem(System.IO.FileInfo,Lucene.Net.Index.IndexReader)">
            <summary>
            Reads the FileInfo passed in into a dictionary object and deletes it from the index
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.ProcessAddQueueItem(System.IO.FileInfo,Lucene.Net.Index.IndexWriter)">
            <summary>
            Reads the FileInfo passed in into a dictionary object and adds it to the index
            </summary>
            <param name="x"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.GetFieldValue(System.String)">
            <summary>
            All field data will be stored into Lucene as is except for dates, these can be stored as standard: yyyyMMdd
            Any standard text will be put in lower case format.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.AddNodesToIndex(System.String,System.String)">
            <summary>
            Adds all nodes with the given xPath root.
            </summary>
            <param name="xPath">The x path.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.VerifyFolder(System.IO.DirectoryInfo)">
            <summary>
            Creates the folder if it does not exist.
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.IndexReady">
            <summary>
            Checks if the index is ready to open/write to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.IndexExists">
            <summary>
            Check if there is an index in the index folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.CheckDisposed">
            <summary>
            Checks the disposal state of the objects
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.Dispose">
            <summary>
            When the object is disposed, all data should be written
            </summary>
        </member>
        <member name="M:UmbracoExamine.LuceneExamineIndexer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.DataService">
            <summary>
            The data service used for retreiving and submitting data to the cms
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.IndexingAnalyzer">
            <summary>
            The analyzer to use when indexing content, by default, this is set to StandardAnalyzer
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.CommitCount">
            <summary>
            Used to keep track of how many index commits have been performed.
            This is used to determine when index optimization needs to occur.
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.RunAsync">
            <summary>
            Indicates whether or this system will process the queue items asynchonously. Default is true.
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.IndexSecondsInterval">
            <summary>
            The interval (in seconds) specified for the timer to process index queue items.
            This is only relevant if <see cref="!:RunAsnc"/> is true.
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.LuceneIndexFolder">
            <summary>
            The folder that stores the Lucene Index files
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.IndexQueueItemFolder">
            <summary>
            The folder that stores the index queue files
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.ExecutiveIndex">
            <summary>
            The Executive to determine if this is the master indexer
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.IndexSetName">
            <summary>
            The index set name which references an Examine <see cref="T:UmbracoExamine.Config.IndexSet"/>
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.SupportProtectedContent">
            <summary>
            By default this is false, if set to true then the indexer will include indexing content that is flagged as publicly protected.
            This property is ignored if SupportUnpublishedContent is set to true.
            </summary>
        </member>
        <member name="E:UmbracoExamine.LuceneExamineIndexer.IndexOptimizing">
            <summary>
            Occurs when [index optimizing].
            </summary>
        </member>
        <member name="E:UmbracoExamine.LuceneExamineIndexer.DocumentWriting">
            <summary>
            Occurs when [document writing].
            </summary>
        </member>
        <member name="P:UmbracoExamine.LuceneExamineIndexer.SupportUnpublishedContent">
            <summary>
            Determines if the manager will call the indexing methods when content is saved or deleted as
            opposed to cache being updated.
            </summary>
            <value></value>
        </member>
        <member name="T:UmbracoExamine.DataServices.UmbracoMediaService">
            <summary>
            Data service used to query for media
            </summary>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoMediaService.GetLatestMediaByXpath(System.String)">
            <summary>
            This is quite an intensive operation...
            get all root media, then get the XML structure for all children,
            then run xpath against the navigator that's created
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.FileSystemExtensions.ClearFiles(System.IO.DirectoryInfo)">
            <summary>
            Deletes all files in the folder and returns the number deleted.
            </summary>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.SearchResults">
            <summary>
            An implementation of the search results returned from Lucene.Net
            </summary>
        </member>
        <member name="F:UmbracoExamine.SearchResults.docs">
            <summary>
            Internal cache of search results
            </summary>
        </member>
        <member name="M:UmbracoExamine.SearchResults.CreateSearchResult(Lucene.Net.Documents.Document,System.Single)">
            <summary>
            Creates the search result from a <see cref="T:Lucene.Net.Documents.Document"/>
            </summary>
            <param name="doc">The doc to convert.</param>
            <param name="score">The score.</param>
            <returns>A populated search result object</returns>
        </member>
        <member name="M:UmbracoExamine.SearchResults.Skip(System.Int32)">
            <summary>
            Skips to a particular point in the search results.
            </summary>
            <remarks>
            This allows for lazy loading of the results paging. We don't go into Lucene until we have to.
            </remarks>
            <param name="skip">The number of items in the results to skip.</param>
            <returns>A collection of the search results</returns>
        </member>
        <member name="M:UmbracoExamine.SearchResults.GetEnumerator">
            <summary>
            Gets the enumerator starting at position 0
            </summary>
            <returns>A collection of the search results</returns>
        </member>
        <member name="M:UmbracoExamine.SearchResults.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:UmbracoExamine.SearchResults.TotalItemCount">
            <summary>
            Gets the total number of results for the search
            </summary>
            <value>The total items from the search.</value>
        </member>
        <member name="T:UmbracoExamine.UmbracoEventManager">
            <summary>
            An <see cref="T:umbraco.BusinessLogic.ApplicationBase"/> instance for wiring up Examine to the Umbraco events system
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoEventManager.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoEventManager.Document_AfterSave(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Only index using providers that SupportUnpublishedContent
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoEventManager.Document_AfterDelete(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Only remove indexes using providers that SupportUnpublishedContent
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoEventManager.content_AfterUpdateDocumentCache(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DocumentCacheEventArgs)">
            <summary>
            Only Update indexes for providers that dont SupportUnpublishedContent
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoEventManager.content_AfterClearDocumentCache(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DocumentCacheEventArgs)">
            <summary>
            Only update indexes for providers that don't SupportUnpublishedContnet
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UmbracoExamine.Config.ExamineLuceneIndexes">
            <summary>
            Defines XPath statements that map to specific umbraco nodes
            </summary>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.IndexPath">
            <summary>
            The folder path of where the lucene index is stored
            </summary>
            <value>The index path.</value>
            <remarks>
            This can be set at runtime but will not be persisted to the configuration file
            </remarks>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.IndexDirectory">
            <summary>
            Returns the DirectoryInfo object for the index path.
            </summary>
            <value>The index directory.</value>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.IndexParentId">
            <summary>
            When this property is set, the indexing will only index documents that are children of this node.
            </summary>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.IncludeNodeTypes">
            <summary>
            The collection of node types to index, if not specified, all node types will be indexed (apart from the ones specified in the ExcludeNodeTypes collection).
            </summary>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.ExcludeNodeTypes">
            <summary>
            The collection of node types to not index. If specified, these node types will not be indexed.
            </summary>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.IndexUserFields">
            <summary>
            A collection of user defined umbraco fields to index
            </summary>
            <remarks>
            If this property is not specified, or if it's an empty collection, the default user fields will be all user fields defined in Umbraco
            </remarks>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSet.IndexAttributeFields">
            <summary>
            The fields umbraco values that will be indexed. i.e. id, nodeTypeAlias, writer, etc...
            </summary>
            <remarks>
            If this is not specified, or if it's an empty collection, the default optins will be specified:
            - id
            - version
            - parentID
            - level
            - writerID
            - creatorID
            - nodeType
            - template
            - sortOrder
            - createDate
            - updateDate
            - nodeName
            - urlName
            - writerName
            - creatorName
            - nodeTypeAlias
            - path
            </remarks>
        </member>
        <member name="T:UmbracoExamine.DocumentWritingEventArgs">
            <summary>
            Event arguments for a Document Writing event
            </summary>
        </member>
        <member name="M:UmbracoExamine.DocumentWritingEventArgs.#ctor(System.Int32,Lucene.Net.Documents.Document,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="nodeId"></param>
            <param name="d"></param>
            <param name="fields"></param>
        </member>
        <member name="P:UmbracoExamine.DocumentWritingEventArgs.Document">
            <summary>
            Lucene.NET Document, including all previously added fields
            </summary>
        </member>
        <member name="P:UmbracoExamine.DocumentWritingEventArgs.Fields">
            <summary>
            Fields of the indexer
            </summary>
        </member>
        <member name="P:UmbracoExamine.DocumentWritingEventArgs.NodeId">
            <summary>
            NodeId of the document being written
            </summary>
        </member>
        <member name="T:UmbracoExamine.Config.UmbracoFieldPolicies">
            <summary>
            A class that defines the type of index for each Umbraco field (non user defined fields)
            Alot of standard umbraco fields shouldn't be tokenized or even indexed, just stored into lucene
            for retreival after searching.
            </summary>
        </member>
        <member name="M:UmbracoExamine.Config.UmbracoFieldPolicies.GetPolicy(System.String)">
            <summary>
            return the index policy for the field name passed in, if not found, return normal
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.SearchCriteria.LuceneSearchCriteria">
            <summary>
            This class is used to query against Lucene.Net
            </summary>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.Id(System.Int32)">
            <summary>
            Query on the id
            </summary>
            <param name="id">The id.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.NodeName(System.String)">
            <summary>
            Query on the NodeName
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.NodeName(Examine.SearchCriteria.IExamineValue)">
            <summary>
            Query on the NodeName
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.NodeTypeAlias(System.String)">
            <summary>
            Query on the NodeTypeAlias
            </summary>
            <param name="nodeTypeAlias">The node type alias.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.NodeTypeAlias(Examine.SearchCriteria.IExamineValue)">
            <summary>
            Query on the NodeTypeAlias
            </summary>
            <param name="nodeTypeAlias">The node type alias.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.ParentId(System.Int32)">
            <summary>
            Query on the Parent ID
            </summary>
            <param name="id">The id of the parent.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.Field(System.String,System.String)">
            <summary>
            Query on the specified field
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="fieldValue">The field value.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.Field(System.String,Examine.SearchCriteria.IExamineValue)">
            <summary>
            Query on the specified field
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="fieldValue">The field value.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.GetFieldInternalQuery(System.String,Examine.SearchCriteria.IExamineValue)">
            <summary>
            Returns the Lucene query object for a field given an IExamineValue
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.GetMultiFieldQuery(System.String[],Examine.SearchCriteria.IExamineValue[],Lucene.Net.Search.BooleanClause.Occur)">
            <summary>
            Creates our own style 'multi field query' used internal for the grouped operations
            </summary>
            <param name="fields"></param>
            <param name="fieldVals"></param>
            <param name="occurance"></param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.RawQuery(System.String)">
            <summary>
            Passes a raw search query to the provider to handle
            </summary>
            <param name="query">The query.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.OrderBy(System.String[])">
            <summary>
            Orders the results by the specified fields
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.OrderByDescending(System.String[])">
            <summary>
            Orders the results by the specified fields in a descending order
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="M:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.OrderByInternal(System.Boolean,System.String[])">
            <summary>
            Internal operation for adding the ordered results
            </summary>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldNames">The field names.</param>
            <returns>A new <see cref="T:Examine.SearchCriteria.IBooleanOperation"/> with the clause appended</returns>
        </member>
        <member name="P:UmbracoExamine.SearchCriteria.LuceneSearchCriteria.BooleanOperation">
            <summary>
            Gets the boolean operation which this query method will be added as
            </summary>
            <value>The boolean operation.</value>
        </member>
        <member name="P:UmbracoExamine.Config.IndexSetCollection.Item(System.String)">
            <summary>
            Default property for accessing Image Sets
            </summary>
            <param name="setType"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.IndexerExecutive">
            <summary>
            Manages the delegation of authority over which machine in a load balanced environment will perform the indexing.
            This is done by an IO race on initialization of the LuceneExamineIndexer.
            If a server's app pool is recycled at a seperate time than the rest of the servers in the cluster, it will generally
            take over the executive role (this is dependant on the time that the last latest server's app pool was restarted).
            The Executive is determined by file lock (.lck) file, theoretically there should only be one of these.
            If there is only 1 server in the cluster, then obviously it is the Executive.
            </summary>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.IsInitialized">
            <summary>
            Determines if the executive has been initialized. 
            This is useful for checking if files have been deleted during website operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.TimestampTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Fired every 10 minutes by the timer object. This timestamps the EXA file to 
            enure the system knows that this server is active.
            This is to ensure that all systems in a Load Balanced environment are aware of exactly how
            many other servers are taking part in the load balancing and who they are.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.CreateEXAFile">
            <summary>
            Creates an xml file to declare that this machine is taking part in the index writing.
            This is used to determine the master indexer if this app exists in a load balanced environment.
            </summary>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.CreateLCKFile">
            <summary>
            Creates a lock file for this machine if there aren't other ones.
            </summary>
            <returns>returns true if a lock file was successfully created for this machine.</returns>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.ClearOldLCKFiles(System.DateTime)">
            <summary>
            delete all old lck files (any that are more than cutoffTime old)
            </summary>
            <param name="cutoffTime"></param>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.ClearOldEXAFiles(System.DateTime)">
            <summary>
            delete all old exa files (any that are more than cutoffTime old)
            </summary>
            <param name="cutoffTime"></param>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.GetOtherLCKFiles">
            <summary>
            Get all lck files that are not named by this machines name. If there are any, this means that another machine
            has won the race and created the lck file for itself. If there is a lck file with the current machines name, then this
            must mean it was previously the master indexer and the apppool has recycled in less than the hour.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.TimestampLck">
            <summary>
            Updates the timestamp for lck file if it exists
            </summary>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.TimestampEXA">
            <summary>
            Updates the timestamp for the exa file
            </summary>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.GetEXA">
            <summary>
            Read the machines EXA file
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.GetLCK">
            <summary>
            Read the machines LCK file
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.RaceForMasterIndexer">
            <summary>
            This will check for any lock files, not created by the current machine. If there are any, then this machine will flag it's
            exa file as not being the master indexer, otherwise, it will try to create it's own lock file to let others know it is the race
            winner and therefore the master indexer. If this succeeds, it will update it's exa file to flag it as the master indexer.
            </summary>
        </member>
        <member name="M:UmbracoExamine.IndexerExecutive.Dispose">
            <summary>
            When the object is disposed, all data should be written
            </summary>
        </member>
        <member name="P:UmbracoExamine.IndexerExecutive.IsExecutiveMachine">
            <summary>
            Ensures there is an elected Executive, otherwise starts the race. 
            Returns a bool as to whether or not this is the Executive machine.
            </summary>
        </member>
        <member name="P:UmbracoExamine.IndexerExecutive.IsLoadBalancedEnvironment">
            <summary>
            Returns a boolean determining whether or not this server involved in a LoadBalanced
            environment with Umbraco Examine.
            </summary>
        </member>
        <member name="P:UmbracoExamine.IndexerExecutive.ExecutiveIndexerMachineName">
            <summary>
            Returns the machine name of the executive indexer
            </summary>
        </member>
        <member name="P:UmbracoExamine.IndexerExecutive.ServerCount">
            <summary>
            The number of servers active in indexing
            </summary>
        </member>
        <member name="M:UmbracoExamine.AllHitsCollector.GetDocId(System.Int32)">
            <summary>
            Gets the doc id at a specified index
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.AllHitsCollector.GetDocScore(System.Int32)">
            <summary>
            Gets the doc score for a doc at a specified index
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
    </members>
</doc>
